{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let mainContract = addressFromStringValue("3NCsqf4pFGtECs3vM4j1nKqL6VA3HdiNGeZ") # HERE TO SET MEMBERSHIP SMART CONTRACT ADDRESS

let QUORUM = 1  # 50% votes needed

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

func tryGetString(key: String) = {
    let val = match getString(this, key) {
        case b:String => b
        case _ => ""
    }
    val
}

func isOwner(address: Address) = {
    address == this
}

func getGroup() = {
    let val = match getString(mainContract, "working_group_members") {
        case b:String => b
        case _ => ""
    }
    val
}

func getMembers() = {
    let val = match getString(mainContract, "dao_members") {
        case b:String => b
        case _ => ""
    }
    val
}

func getDAOSize() = {
    let val = match getInteger(mainContract, "dao_size") {
        case b:Int => b
        case _ => 0
    }
    val
}

func isGroupMember(a: Address) = {
    # Grants & Funding group membership check
    let val = match getInteger(mainContract, "working_group_member_"+a.toString()+"_weight") {
        case b:Int => b
        case _ => 0
    }
    val > 0
}


func canMemberVote(address: Address) = {
    let val = match getInteger(mainContract, "dao_member_"+address.toString()+"_weight") {
        case b:Int => b
        case _ => 0
    }
    val > 0
}

func getVoteValue(s: String) = {
    if (s == "like") then {
        1
    } else if (s == "dislike") then {
        -1
    } else throw("you need to vote with 'like' or 'dislike' value")
}

func addTaskConditions(address: Address) = {
    if (!(isGroupMember(address))) then {
        throw("grants working group access only")

    } else true
}

func addRewardConditions(address: Address, taskId: String) = {
    if (!(isGroupMember(address))) then {
        throw("grants working group access only")

    } else if (tryGetString("tasks_"+taskId+"_status") != "") then {
        throw("grant isn`t new")

    } else true
}

func voteForTaskProposalConditions(address: Address, taskId: String) = {
    if (!canMemberVote(address)) then {
        throw("you can't vote")
    
    } else if (tryGetString("tasks_"+taskId+"_status") != "proposed") then {
        throw("voting is closed or not started")
    
    } else if (tryGetInteger("tasks_"+taskId+"_voted_"+address.toString()) != 0) then {
        throw("you have already voted") 

    } else true
}

func finishTaskProposalVotingConditions(address: Address, taskId: String) = {
    if (!(isGroupMember(address))) then {
        throw("grants working group access only")

    } else if (tryGetString("tasks_"+taskId+"_status") != "proposed") then {
        throw("voting is not active")       

    } else if ((tryGetInteger("tasks_"+taskId+"_voting_amount") * 100) / getDAOSize() < QUORUM) then {
        throw("more than " + QUORUM.toString() + "% members have to vote before finishing the voting")

    } else true
}

func applyForTaskConditions(address: Address, taskId: String, teamIdentifier: String) = {
    if (tryGetString("tasks_"+taskId+"_status") != "ready_to_apply") then {
        throw("this grant has not yet been approved") 

    } else if (tryGetString("tasks_"+taskId+"_app_"+teamIdentifier+"_leader") == address.toString()) then {
        throw("you are applied") 

    } else true
}

func voteForApplicantConditions(address: Address, taskId: String, teamIdentifier: String) = {
    let voteHash = drop(address.toString(), 10) + drop(teamIdentifier, 10)
    if (!canMemberVote(address)) then {
        throw("you can't vote")

    } else if (tryGetString("tasks_"+taskId+"_status") != "ready_to_apply") then {
        throw("voting is not active")    

    } else if (tryGetInteger("tasks_"+taskId+"_vote_"+voteHash) != 0) then {
        throw("you have already voted on this team")

    } else true
}

func finishApplicantsVotingConditions(address: Address, taskId: String, applicantsList: List[String]) = {
    if (!(isGroupMember(address))) then {
        throw("grants working group access only")

    } else if (tryGetString("tasks_"+taskId+"_status") != "ready_to_apply") then {
        throw("voting is not active")

    } else if (size(applicantsList) == 0) then {
        throw("no one has yet responded to the grant")

    } else true
}

func startWorkConditions(address: Address, taskId: String, teamIdentifier: String) = {
    if (tryGetString("tasks_"+taskId+"_status") != "team_chosen") then {
        throw("winner is not define")

    } else if (address.toString() != tryGetString("tasks_"+taskId+"_app_"+teamIdentifier+"_leader")) then {
        throw("team leader only")

    } else true
}

func acceptWorkResultConditions(address: Address, taskId: String) = {
    if (!(isGroupMember(address))) then {
        throw("grants working group access only")

    } else true
}


# Set status -> undefined
# [taskId]: {
#   title,
#   link
# }
@Callable(i)
func addTask(title: String, link: String) = {
    if (addTaskConditions(i.caller)) then {
        WriteSet([
            DataEntry("tasks_" + i.transactionId.toBase58String() + "_title", title),
            DataEntry("tasks_" + i.transactionId.toBase58String() + "_link", link)
        ])
    } else throw("checks are not passed")
}


# Set status -> proposed
# [taskId]: {
#   title,
#   link,
#   reward   
# }
# transaction waves on address
@Callable(i)
func addReward(taskId: String) = {
    # will also contain task description / requirements / reward payment model
    if (addRewardConditions(i.caller, taskId)) then {
        let reward = i.payment.extract().amount
        WriteSet([
            # Parsed in dAPP to tasks[id].reward
            DataEntry("tasks_"+taskId+"_reward", reward),

            # Parsed in dAPP to tasks[id].status
            DataEntry("tasks_"+taskId+"_status", "proposed")
        ])
    } else throw("checks are not passed")
}


# Unchanged status -> proposal
# [taskId]: {
#   title,
#   link,
#   reward,
#   voting = {
#      amount,
#      state  
#   },
#   voted = {
#      [address] = undefined | 1  
#   } 
# }
@Callable(i)
func voteForTaskProposal(taskId: String, voteValue: String) = {
    if (voteForTaskProposalConditions(i.caller, taskId)) then {
        let voteKey = "tasks_"+taskId+"_voted_"+i.caller.toString()

        # Parsed in dAPP to tasks[id].voting.state -> integer
        let votingKey = "tasks_"+taskId+"_voting_state"
        let votingState = tryGetInteger(votingKey)

        # Parsed in dAPP to tasks[id].voting.amount -> integer
        let votesAmountKey = "tasks_"+taskId+"_voting_amount"
        let votesAmountState = tryGetInteger(votingKey) + 1
        
        let voteValueInt = getVoteValue(voteValue) 

        let newVotingState = votingState + voteValueInt
        WriteSet([
            DataEntry(votingKey, newVotingState),
            DataEntry(voteKey, voteValueInt),
            DataEntry(votesAmountKey, votesAmountState)
        ])
    } else throw("checks are not passed")
}


# Set status -> ready_to_apply | rejected
# [taskId]: {
#   title,
#   link,
#   reward,
#   voting = {
#      amount,
#      state  
#   },
#   voted = {
#      [address] = undefined | 1  
#   } 
# }
@Callable(i)
func finishTaskProposalVoting(taskId: String) = {
    if (finishTaskProposalVotingConditions(i.caller, taskId)) then {
        let votingKey = "tasks_"+taskId+"_voting_state"
        WriteSet([
            # Parsed in dAPP to tasks[id].status -> string
            DataEntry("tasks_" + taskId + "_status", 
                if (tryGetInteger(votingKey) > 0) 
                    then "ready_to_apply" 
                    else "rejected"
            )
        ])
    } else throw("checks are not passed")
}


# Unchanged status -> ready_to_apply
# [taskId]: {
#   title,
#   link,
#   reward,
#   voting = {
#       amount,
#       state  
#   },
#   voted = {
#       [address] = undefined | 1  
#   }
#   applicants
#   app = {
#       [id] = {
#           name,
#           link,
#           leader,
#           id
#       }
#   }  
# }
@Callable(i)
func applyForTask(taskId: String, teamName: String, link: String) = {
    let teamIdentifier = drop(i.caller.toString(), 10)
    
    if (applyForTaskConditions(i.caller, taskId, teamIdentifier)) then {
        let listKey = "tasks_"+taskId+"_applicants"
        let currentApplicantsList = tryGetString(listKey)

        # Use address leader as identifier team
        let newApplicantsList = currentApplicantsList+";"+i.caller.toString()
        WriteSet([
            # Parsed in dAPP to tasks[id].app[id].name -> string
            DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_name", teamName),
            DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_link", link),

            # Parsed in dAPP to tasks[id].app[id].leader -> id
            DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_leader", i.caller.toString()),

            # Parsed in dAPP to tasks[id].app[id].id -> key
            DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_id", teamIdentifier),

            # Parsed in dAPP to tasks[id].apps -> list id (separator ;)
            DataEntry(listKey, newApplicantsList)
        ])
    } else throw("checks are not passed")
}


# Unchanged status -> ready_to_apply
# [taskId]: {
#   title,
#   link,
#   reward,
#   voting = {
#       amount,
#       state  
#   },
#   voted = {
#       [address] = undefined | 1  
#   }
#   applicants
#   app = {
#       [id] = {
#           name,
#           link,
#           leader,
#           id,
#           score    
#       }
#   }  
# }
@Callable(i)
func voteForApplicant(taskId: String, teamIdentifier: String, voteValue: String) = {
    if (voteForApplicantConditions(i.caller, taskId, teamIdentifier)) then {
        
        let listKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_voted"
        let newApplicantsList = tryGetString(listKey)+";"+i.caller.toString()
        let voteHash = drop(i.caller.toString(), 20) + teamIdentifier
        let voteKey = "tasks_"+taskId+"_vh_"+voteHash
        
        if (tryGetString(voteKey) == i.caller.toString()) then {
            throw("you have already voted on this team")
        } else {
            let teamVotesAmountKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_votes"
            let teamScoreKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_score"
            let teamVotesAmount = 1 + tryGetInteger(teamVotesAmountKey)
            let newTeamScore = getVoteValue(voteValue) + tryGetInteger(teamScoreKey)
            WriteSet([
                # Parsed in dAPP to tasks[id].app[teamId].votes -> integer
                DataEntry(listKey, newApplicantsList),
                DataEntry(voteKey, i.caller.toString()),
                DataEntry(teamVotesAmountKey, teamVotesAmount),
                # Parsed in dAPP to tasks[id].app[teamId].score -> integer
                DataEntry(teamScoreKey, newTeamScore)
            ])
        }
    } else throw("checks are not passed")
}


# Set status -> team_chosen
# [taskId]: {
#   title,
#   link,
#   reward,
#   voting = {
#       amount,
#       state  
#   },
#   voted = {
#       [address] = undefined | 1  
#   }
#>  performer
#   applicants
#   app = {
#       [id] = {
#           name,
#           link,
#           leader,
#           id,
#           score,
#>          process = can_begin        
#       }
#   }  
# }
@Callable(i)
func finishApplicantsVoting(taskId: String) = {
    func hasMoreScore(aid: Int, aid2: Int) = {
        let listKey = "tasks_"+taskId+"_applicants"
        let applicantsList = getStringValue(this, listKey).split(";")
        let teamIdentifier = drop(applicantsList[aid], 10)
        let teamVotesScoreKey = "tasks_"+taskId+"_app_"+teamIdentifier+"_score"
        let teamVotesScore = tryGetInteger(teamVotesScoreKey)

        let team2Identifier = drop(applicantsList[aid2], 10)
        let team2VotesScoreKey = "tasks_"+taskId+"_app_"+team2Identifier+"_score"
        let team2VotesScore = tryGetInteger(team2VotesScoreKey)

        if (teamVotesScore > team2VotesScore) then {
            aid
        } else {
            aid2
        }
    }

    let listKeys = tryGetString("tasks_" + taskId + "_applicants")
    let applicantsList = listKeys.split(";")

    if (finishApplicantsVotingConditions(i.caller, taskId, applicantsList)) then {
        let chosenTeamId = FOLD<2>([0,1], 0, hasMoreScore)

            let teamIdentifier = drop(applicantsList[chosenTeamId], 10)
            WriteSet([
                # Parsed in dAPP to tasks[id].status -> string
                DataEntry("tasks_"+taskId+"_status", "team_chosen"),

                # Parsed in dAPP to tasks[id].performer -> string
                DataEntry("tasks_"+taskId+"_performer", teamIdentifier),

                # Parsed in dAPP to tasks[id].app[teamId].process -> string
                DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_process", "can_begin")
            ])
    } else throw("checks are not passed")
}


# Set status -> work_started
# [taskId]: {
#   title,
#   link,
#   reward,
#   voting = {
#       amount,
#       state  
#   },
#   voted = {
#       [address] = undefined | 1  
#   }
#   applicants
#   app = {
#       [id] = {
#           name,
#           link,
#           leader,
#           id,
#           score,
#>          process = work_started        
#       }
#   }  
# }
@Callable(i)
func startWork(taskId: String) = {
    let teamIdentifier = tryGetString("tasks_"+taskId+"_performer")

    if (startWorkConditions(i.caller, taskId, teamIdentifier)) then {
        WriteSet([
            # Parsed in dAPP to tasks[id].status -> string
            DataEntry("tasks_"+taskId+"_status", "work_started"),

            # Parsed in dAPP to tasks[id].app[teamId].process -> string
            DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_process", "work_started")
        ])
    } else throw("checks are not passed")
}


# Set status -> work_finished
# [taskId]: {
#   title,
#   link,
#   reward,
#   voting = {
#       amount,
#       state  
#   },
#   voted = {
#       [address] = undefined | 1  
#   }
#   applicants
#   app = {
#       [id] = {
#           name,
#           link,
#           leader,
#           id,
#           score
#>          process = work_finished
#       }
#   }
#>  report
# }
@Callable(i)
func acceptWorkResult(taskId: String, reportLink: String) = {
    # TO DISCUSS ::: WHO CAN CONFIRM THE WORK RESULT ?

    if (acceptWorkResultConditions(i.caller, taskId)) then {
        let rewardAmount = tryGetInteger("tasks_"+taskId+"_reward")
        let teamIdentifier = tryGetString("tasks_"+taskId+"_performer")
        let teamAddress = tryGetString("tasks_"+taskId+"_app_"+teamIdentifier+"_leader")
        ScriptResult(
            WriteSet([
                # Parsed in dAPP to tasks[id].status -> string
                DataEntry("tasks_"+taskId+"_status", "work_finished"),

                # Parsed in dAPP to tasks[id].app[teamId].process -> string
                DataEntry("tasks_"+taskId+"_app_"+teamIdentifier+"_process", "work_finished"),
                DataEntry("tasks_"+taskId+"_report", reportLink)
            ]),
            TransferSet([
                ScriptTransfer(teamAddress.addressFromStringValue(), rewardAmount, unit)
            ])
        )        
    } else throw("checks are not passed")
}


# Set status -> rejected
# [taskId]: {
#   any
# }
@Callable(i)
func rejectTask(taskId: String) = {
    # called by Working Group Member to undo the task
    # only in extraordinary cases
    if (isGroupMember(i.caller)) then {
        WriteSet([
            DataEntry("tasks_"+taskId+"_status", "rejected")
        ])
    } else throw("grants working group access only")
}

# @Verifier(tx)
# func standardVerifier() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
